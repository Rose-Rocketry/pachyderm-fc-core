@startuml

package core {
    package pachy {
        struct DataPacket {
            + time: uint32_t
            + accel: VectorF
            + altitude: float
            + higAccel: VectorF
            + battVoltage: uint8_t
            + temp: uint8_t
            + pyroCont: uint8_t
            + gyro: VectorF
            + state: FlightState
            + vel: VectorF
            + orientation: QuatF
        }
        
        class FCCore {
            - debug: DataSink*
            - telem: DataSink*
            - flash: FlashDevice*
            - config: ConfigSource*
            - file: StorageSink*
            - flash_queue: static_queue<DataPacket>
            - log: FlashSink
            + FCCore(debug_sink: DataSink*, telem_sink: DataSink*, flash_dev: FlashDevice*, config: ConfigSource*, fs: StorageSink*)
            + begin(): void
            + step(): void
        }
        FCCore --> DataSink
        FCCore --> FlashDevice
        FCCore --> FlashSink
        FCCore --> ConfigSource
        FCCore --> static_queue
        FCCore -->"*" DataPacket

        interface DataSink {
            + buf_avail(): size_t
            + write(data: const char*, size: size_t): void
            + write_obj<TYPE>(obj: TYPE): void
            + printf(format: const char*, ...): void
        }

        interface FlashDevice {
            + {static} ERASE_SIZE: constexpr size_t 
            + {static} FLASH_SIZE: constexpr size_t
            + read(addr: size_t, buffer: char*, size: size_t): bool
            + write(addr: size_t, data: const char*, size: size_t): bool
            + erase(addr: size_t): bool
        }

        interface ConfigSource {
            + open(filename: const char*): bool
            + read(section: const char*, header: const char*): bool
        }

        interface StorageSink {
            + open(filename: const char*): bool
            + close(): bool
        }
        StorageSink ..|> DataSink

        class FlashSink {
            - flash: FlashDevice*
            + FlashSink(flash_dev: FlashDevice*)
            + init(): size_t
            + buf_avail(): size_t
            + write(data: const char*, size: size_t): void
        }
        FlashSink --> FlashDevice
        FlashSink .r.|> DataSink

        class static_queue<T, SIZE> {
            - queue: T[SIZE]
            - read_ind: size_t
            - write_ind: size_t
            - push_unsafe(item: const T&): void
            - pop_unsafe(dest: T*): void
            + size(): size_t
            + free(): size_t
            + push(item: const T&): bool
            + push_anyway(item: const T&): bool
            + pop(dest: T*): bool
        }
    }
}

package inipp {
    class Ini {
    } 
}

package sil {
    class StreamSink {
        + buf_avail(): size_t
        + write(data: const char*, size: size_t): void
    }
    StreamSink .u.|> core.pachy.DataSink

    class FlashImage {
        + read(addr: size_t, buffer, char*, size: size_t): bool
        + write(addr: size_t, data: const char*, size: size_t): bool
        + erase_64k(addr: size_t): bool
    }
    FlashImage .u.|> core.pachy.FlashDevice

    class FileConfig {
        - source: Ini
        - dir: string
        + FileConfig(rootdir: string)
        + open(filename: const char*): bool
        + read(section: const char*, header: const char*): bool
        
    }
    FileConfig .u.|> core.pachy.ConfigSource
    FileConfig --> inipp.Ini

    class FileStorage {
        - dir: string
        - file: ofstream
        + FileStorage(rootdir: string)
        + open(path: const char*): bool
        + close(): bool
        + buf_avail(): size_t
        + write(data: const char*, size: size_t): void
    }
    FileStorage .u.|> core.pachy.StorageSink
}

package firmware {
    class main {
        - core: FCCore
        - telem_sink: RFSink
        - flash_dev: WinbondFlash
    }
    main --> core.pachy.FCCore
    main --> RFSink
    main --> WinbondFlash

    class RFSink {
        + RFSink(...)
    }
    RFSink .u.|> core.pachy.DataSink

    class WinbondFlash {
        + WinbondFlash(...)
    }
    WinbondFlash .u.|> core.pachy.FlashDevice
}
@enduml